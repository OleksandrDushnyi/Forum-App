// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  password String
  name     String
  avatar   String
  roleId   Int       @default(0)
  role     Role      @relation(fields: [roleId], references: [id])
  isVerified Boolean @default(false)
  resetToken String?  
  resetTokenExpires DateTime?
  posts    Post[]
  comments Comment[]
  likes    Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String
  users       User[]
}

model Post {
  id             Int            @id @default(autoincrement())
  title          String
  content        String
  image          String
  userId         Int
  user           User           @relation(fields: [userId], references: [id])
  comments       Comment[]
  likes          Like[]
  postCategories PostCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String
  userId  Int
  postId  Int
  user    User   @relation(fields: [userId], references: [id])
  post    Post   @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id     Int  @id @default(autoincrement())
  userId Int
  postId Int
  user   User @relation(fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
}

model Category {
  id             Int            @id @default(autoincrement())
  name           String         @unique
  postCategories PostCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostCategory {
  id         Int      @id @default(autoincrement())
  postId     Int
  categoryId Int
  post       Post     @relation(fields: [postId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
}
